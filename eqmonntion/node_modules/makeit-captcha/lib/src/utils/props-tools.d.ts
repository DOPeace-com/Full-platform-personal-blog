import { PropType, Slots } from 'vue';
import { VueTypeDef, VueTypeValidableDef } from 'vue-types';
export declare const tuple: <T extends string[]>(...args: T) => T;
declare const splitAttrs: (attrs: any) => {
    onEvents: {};
    events: {};
    extraAttrs: {};
};
declare const getEvents: (ele?: any, on?: boolean) => {} | {};
declare const isEmptyElement: (elem: any) => boolean;
declare const flattenChildren: (children?: any[]) => any[];
declare const getSlot: (instance: any, name?: string, options?: {}) => any[];
declare const getSlotContent: (instance: any, prop?: string, options?: any, exec?: boolean) => any;
declare const getPropSlot: (slots: Slots, props: any, prop?: string) => any;
declare const getPrefixCls: (suffixCls: string, prefixCls?: string, customizeCls?: string) => string;
declare const initProps: <T>(types: T, defaultProps: { [K in keyof T]?: T[K] extends VueTypeValidableDef<infer U> ? U : T[K] extends VueTypeDef<infer U_1> ? U_1 : T[K] extends {
    type: PropType<infer U_2>;
} ? U_2 : any; }) => T;
export { splitAttrs, getEvents, isEmptyElement, flattenChildren, getSlot, getSlotContent, getPropSlot, getPrefixCls, initProps };
