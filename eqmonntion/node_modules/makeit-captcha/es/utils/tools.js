function _newArrowCheck(innerThis, boundThis) { if (innerThis !== boundThis) { throw new TypeError("Cannot instantiate an arrow function"); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

import { $g } from './global';

var MiTools = /*#__PURE__*/function () {
  function MiTools() {
    _classCallCheck(this, MiTools);
  }

  _createClass(MiTools, [{
    key: "createMeta",
    value:
    /**
     * 创建 meta 标签 ( Create meta element ).
     * @param name
     * @param content
     */
    function createMeta(name, content) {
      var head = document.getElementsByTagName('head');
      var meta = document.createElement('meta');
      meta.name = name.trim();
      meta.content = content.trim();
      if (head) head[0].appendChild(meta);
    }
    /**
     * 设置标题.
     * @param title
     */

  }, {
    key: "setTitle",
    value: function setTitle(title) {
      var _$g$powered, _$g$title;

      var powered = (_$g$powered = $g.powered) !== null && _$g$powered !== void 0 ? _$g$powered : "powered by makeit.vip";
      title = (_$g$title = $g.title) !== null && _$g$title !== void 0 ? _$g$title : 'Makeit Admin Pro';
      if (title !== $g.title) $g.title = title;
      document.title = "".concat(title, " - ").concat(powered);
    }
    /**
     * 设置关键词.
     * @param keywords
     * @param overwritten
     */

  }, {
    key: "setKeywords",
    value: function setKeywords(keywords, overwritten) {
      overwritten = overwritten !== undefined ? overwritten : false;
      var k = $g.keywords;
      var key = keywords ? Array.isArray(keywords) ? keywords.join(', ') : keywords : null;
      keywords = key ? overwritten ? key : "".concat(k, " ").concat(key) : k;
      var element = document.querySelector("meta[name=\"keywords\"]");
      if (element) element.setAttribute('content', keywords);else this.createMeta('keywords', keywords);
    }
    /**
     * 设置描述.
     * @param desc
     * @param overwritten
     */

  }, {
    key: "setDescription",
    value: function setDescription(desc, overwritten) {
      var d = $g.description;
      desc = desc ? overwritten ? desc : "".concat(desc, " ").concat(d) : d;
      var description = document.querySelector("meta[name=\"description\"]");
      if (description) description.setAttribute('content', desc);else this.createMeta('description', desc);
    }
    /**
     * 是否为移动端.
     * 注: iPad Safari 获取的 ua 与 Mac Safari 一致, 需独立判断.
     * @returns
     */

  }, {
    key: "isMobile",
    value: function isMobile() {
      var ua = navigator.userAgent;
      var agents = ['Android', 'iPhone', 'SymbianOS', 'Windows Phone', 'iPad', 'iPod'];
      var isSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Version') !== -1;
      var isIPhone = ua.indexOf('iPhone') !== -1 && ua.indexOf('Version') !== -1;
      var isIPad = isSafari && !isIPhone && 'ontouchend' in document;
      var mobile = false;

      if (isIPad) {
        mobile = true;
      } else {
        for (var i = 0, len = agents.length; i < len; i++) {
          if (ua.indexOf(agents[i]) > 0) {
            mobile = true;
            break;
          }
        }
      }

      return mobile;
    }
    /**
     * Format string content.
     * @param str
     * @param formatter
     */

  }, {
    key: "formatEmpty",
    value: function formatEmpty(str, formatter) {
      if (this.isEmpty(str)) return formatter !== null && formatter !== void 0 ? formatter : '-';
      return str;
    }
    /**
     * Whether the string content is empty.
     * @param str
     * @param format
     */

  }, {
    key: "isEmpty",
    value: function isEmpty(str) {
      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var result = str === null || str == '' || typeof str === 'undefined';
      if (format) result = this.formatEmpty(str);
      return result;
    }
    /**
     * Whether the `element / params` is valid.
     * @param value
     */

  }, {
    key: "isValid",
    value: function isValid(value) {
      return value !== undefined && value !== null && value !== '';
    }
    /**
     * Whether it is a number.
     * @param number
     */

  }, {
    key: "isNumber",
    value: function isNumber(number) {
      return typeof number === 'number' && isFinite(number);
    }
    /**
     * Check the validity of the email.
     * @param email
     * @returns {boolean}
     */

  }, {
    key: "checkEmail",
    value: function checkEmail(email) {
      var regExp = $g.regExp;
      return regExp.email.test(email);
    }
    /**
     * Check Password by rules.
     * @param password
     */

  }, {
    key: "checkPassword",
    value: function checkPassword(password) {
      var regExp = $g.regExp;
      return regExp.password.test(password);
    }
    /**
     * Get the password strength.
     * return a number level ( 1 - 4 ).
     * @param password
     */

  }, {
    key: "getPasswordStrength",
    value: function getPasswordStrength(password) {
      var reg = {
        lower: /[a-z]/,
        upper: /[A-Z]/,
        number: /[\d]/,
        character: /[~!@#$%^&*()_+=\-.,]/
      };
      var strength = 0;
      if (reg.lower.test(password)) strength++;
      if (reg.upper.test(password)) strength++;
      if (reg.number.test(password)) strength++;
      if (reg.character.test(password)) strength++;
      return strength;
    }
    /**
     * random.
     * @returns {string}
     */

  }, {
    key: "random",
    value: function random() {
      return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
    }
    /**
     * Generate a random number within the specified range.
     * @param start
     * @param end
     * @returns {number}
     */

  }, {
    key: "randomNumberInRange",
    value: function randomNumberInRange(start, end) {
      return Math.round(Math.random() * (end - start) + start);
    }
    /**
     * Generate unique string.
     * @param upper
     * @returns {string}
     */

  }, {
    key: "uid",
    value: function uid() {
      var upper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var prefix = arguments.length > 1 ? arguments[1] : undefined;
      var str = (this.random() + this.random() + this.random() + this.random() + this.random() + this.random() + this.random() + this.random()).toLocaleUpperCase();
      if (prefix) str = prefix + str;
      return upper ? str.toUpperCase() : str.toLowerCase();
    }
    /**
     * replace url parameters.
     * @param url
     * @param params
     * @returns
     */

  }, {
    key: "replaceUrlParams",
    value: function replaceUrlParams(url, params) {
      if (Object.keys(params).length > 0) {
        for (var i in params) {
          if (params.hasOwnProperty(i)) {
            var reg = new RegExp('{' + i + '}', 'gi');
            url = url.replace(reg, params[i]);
          }
        }
      }

      return url;
    }
    /**
     * Unit conversion.
     * @param value
     * @param base
     */

  }, {
    key: "px2Rem",
    value: function px2Rem(value) {
      var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;
      return Math.round(value / base * 100) / 100;
    }
    /**
     * 转成rem.
     * @param num
     * @returns
     */

  }, {
    key: "convert2Rem",
    value: function convert2Rem(num) {
      return $tools.isNumber(num) ? "".concat(this.px2Rem(parseInt(num.toString())), "rem") : num ? /%/g.test(num.toString()) ? num : "".concat(this.px2Rem(parseInt(num.toString())), "rem") : null;
    }
    /**
     * convert color.
     * @param color
     * @param opacity
     */

  }, {
    key: "colorHex2Rgba",
    value: function colorHex2Rgba(color) {
      var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;

      if (reg.test(color)) {
        if (color.length === 4) {
          var newColor = '#';

          for (var i = 1; i < 4; i++) {
            newColor += color.slice(i, i + 1).concat(color.slice(i, i + 1));
          }

          color = newColor;
        }

        var changeColor = [];

        for (var _i = 1; _i < 7; _i += 2) {
          changeColor.push(parseInt('0x' + color.slice(_i, _i + 2)));
        }

        return "rgba(".concat(changeColor.join(','), ", ").concat(opacity, ")");
      } else {
        return color;
      }
    }
    /**
     * convert color.
     * @param color
     */

  }, {
    key: "colorRgb2Hex",
    value: function colorRgb2Hex(color) {
      var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;

      if (/^(rgb|RGB)/.test(color)) {
        var aColor = color.replace(/(?:\(|\)|rgb|RGB)*/g, '').split(',');
        var strHex = '#';

        for (var i = 0; i < aColor.length; i++) {
          var hex = Number(aColor[i]).toString(16);
          if (hex === '0') hex += hex;
          strHex += hex;
        }

        if (strHex.length !== 7) strHex = color;
        return strHex;
      } else if (reg.test(color)) {
        var aNum = color.replace(/#/, '').split('');

        if (aNum.length === 6) {
          return color;
        } else if (aNum.length === 3) {
          var numHex = '#';

          for (var _i2 = 0; _i2 < aNum.length; _i2 += 1) {
            numHex += aNum[_i2] + aNum[_i2];
          }

          return numHex;
        }
      } else {
        return color;
      }
    }
    /**
     * requestAnimationFrame.
     * @param callback
     * @returns
     */

  }, {
    key: "raf",
    value: function raf(callback) {
      return window.requestAnimationFrame(callback) || window.setTimeout(callback, 1000 / 60);
    }
    /**
     * cancelAnimationFrame.
     * @param rid
     */

  }, {
    key: "caf",
    value: function caf(rid) {
      window.cancelAnimationFrame(rid);
    }
    /**
     * Gets the actual height of the element from the top of the document.
     * @param el
     * @param pos
     * @returns
     */

  }, {
    key: "getElementActualTopOrLeft",
    value: function getElementActualTopOrLeft(el) {
      var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';
      var actual = pos === 'left' ? el.offsetLeft : el.offsetTop;
      var current = el.offsetParent;

      while (current !== null) {
        actual += pos === 'left' ? current.offsetLeft : current.offsetTop;
        current = current.offsetParent;
      }

      return actual;
    }
    /**
     * scroll to top ( animation ).
     * @param el
     * @param from
     * @param to
     * @param duration
     * @param endCallback
     */

  }, {
    key: "scrollTop",
    value: function scrollTop(el) {
      var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var to = arguments.length > 2 ? arguments[2] : undefined;
      var duration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 800;
      var endCallback = arguments.length > 4 ? arguments[4] : undefined;
      var difference = Math.abs(from - to);
      var step = Math.ceil(difference / duration * 50);
      var rid;

      function scroll(start, end, step, vm) {
        var _this = this;

        if (start === end) {
          if (rid) vm.caf(rid);
          endCallback && endCallback();
          return;
        }

        var d = start + step > end ? end : start + step;
        if (start > end) d = start - step < end ? end : start - step;
        if (el === window) window.scrollTo(d, d);else el.scrollTop = d;
        rid = vm.raf(function () {
          _newArrowCheck(this, _this);

          return scroll(d, end, step, vm);
        }.bind(this));
      }

      scroll(from, to, step, this);
    }
    /**
     * back to top.
     * @param offset
     * @param duration
     */

  }, {
    key: "back2top",
    value: function back2top() {
      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
      var top = offset !== null && offset !== void 0 ? offset : document.documentElement.scrollTop || document.body.scrollTop;
      this.scrollTop(document.body, top, 0, duration);
    }
    /**
     * add event listener.
     * @param el
     * @param event
     * @param listener
     * @param useCapture
     */

  }, {
    key: "on",
    value: function on(el, event, listener, useCapture) {
      if (!!document.addEventListener) {
        if (el && event && listener) el.addEventListener(event, listener, useCapture);
      } else {
        if (el && event && listener) el.attachEvent("on".concat(event), listener);
      }
    }
    /**
     * remove event listener.
     * @param el
     * @param event
     * @param listener
     * @param useCapture
     */

  }, {
    key: "off",
    value: function off(el, event, listener, useCapture) {
      if (!!document.addEventListener) {
        if (el && event && listener) el.removeEventListener(event, listener, useCapture);
      } else {
        if (el && event && listener) el.detachEvent("on".concat(event), listener);
      }
    }
    /**
     * transfer.
     * @param html
     * @returns
     */

  }, {
    key: "htmlEncode",
    value: function htmlEncode(html) {
      var temp = document.createElement('div');
      temp.textContent !== null ? temp.textContent = html : temp.innerText = html;
      var output = temp.innerHTML;
      temp = null;
      return output;
    }
  }]);

  return MiTools;
}();

export var $tools = new MiTools();
export default {
  install: function install(app) {
    app.config.globalProperties.$tools = $tools;
    return app;
  }
};