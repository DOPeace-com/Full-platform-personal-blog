import { App } from 'vue';
export declare const MI_POWERED = "Powered By makeit.vip";
export declare const MI_AVATAT = "https://file.makeit.vip/MIIT/M00/00/00/ajRkHV_pUyOALE2LAAAtlj6Tt_s370.png";
/**
 * 全局通用变量.
 * Global variable.
 */
export declare const $g: {
    name: string;
    title: string;
    site: string;
    author: string;
    theme: {
        active: string;
        thumbnails: {
            dark: string;
            light: string;
        };
    };
    background: {
        default: string;
        captcha: string;
    };
    keywords: string;
    description: string;
    powered: string;
    prefix: string;
    logo: string;
    avatar: string;
    salt: string;
    separator: string;
    apiVersion: string;
    fileServer: string;
    backToTop: boolean;
    userInfo: any;
    isMobile: boolean;
    locale: string;
    methods: string[];
    regExp: {
        mobile: {
            exec: (string: string) => RegExpExecArray;
            test: (string: string) => boolean;
            readonly source: string;
            readonly global: boolean;
            readonly ignoreCase: boolean;
            readonly multiline: boolean;
            lastIndex: number;
            compile: (pattern: string, flags?: string) => RegExp;
            readonly flags: string;
            readonly sticky: boolean;
            readonly unicode: boolean;
            readonly dotAll: boolean;
            [Symbol.match]: (string: string) => RegExpMatchArray;
            [Symbol.replace]: {
                (string: string, replaceValue: string): string;
                (string: string, replacer: (substring: string, ...args: any[]) => string): string;
            };
            [Symbol.search]: (string: string) => number;
            [Symbol.split]: (string: string, limit?: number) => string[];
            [Symbol.matchAll]: (str: string) => IterableIterator<RegExpMatchArray>;
        };
        url: {
            exec: (string: string) => RegExpExecArray;
            test: (string: string) => boolean;
            readonly source: string;
            readonly global: boolean;
            readonly ignoreCase: boolean;
            readonly multiline: boolean;
            lastIndex: number;
            compile: (pattern: string, flags?: string) => RegExp;
            readonly flags: string;
            readonly sticky: boolean;
            readonly unicode: boolean;
            readonly dotAll: boolean;
            [Symbol.match]: (string: string) => RegExpMatchArray;
            [Symbol.replace]: {
                (string: string, replaceValue: string): string;
                (string: string, replacer: (substring: string, ...args: any[]) => string): string;
            };
            [Symbol.search]: (string: string) => number;
            [Symbol.split]: (string: string, limit?: number) => string[];
            [Symbol.matchAll]: (str: string) => IterableIterator<RegExpMatchArray>;
        };
        password: {
            exec: (string: string) => RegExpExecArray;
            test: (string: string) => boolean;
            readonly source: string;
            readonly global: boolean;
            readonly ignoreCase: boolean;
            readonly multiline: boolean;
            lastIndex: number;
            compile: (pattern: string, flags?: string) => RegExp;
            readonly flags: string;
            readonly sticky: boolean;
            readonly unicode: boolean;
            readonly dotAll: boolean;
            [Symbol.match]: (string: string) => RegExpMatchArray;
            [Symbol.replace]: {
                (string: string, replaceValue: string): string;
                (string: string, replacer: (substring: string, ...args: any[]) => string): string;
            };
            [Symbol.search]: (string: string) => number;
            [Symbol.split]: (string: string, limit?: number) => string[];
            [Symbol.matchAll]: (str: string) => IterableIterator<RegExpMatchArray>;
        };
        username: {
            exec: (string: string) => RegExpExecArray;
            test: (string: string) => boolean;
            readonly source: string;
            readonly global: boolean;
            readonly ignoreCase: boolean;
            readonly multiline: boolean;
            lastIndex: number;
            compile: (pattern: string, flags?: string) => RegExp;
            readonly flags: string;
            readonly sticky: boolean;
            readonly unicode: boolean;
            readonly dotAll: boolean;
            [Symbol.match]: (string: string) => RegExpMatchArray;
            [Symbol.replace]: {
                (string: string, replaceValue: string): string;
                (string: string, replacer: (substring: string, ...args: any[]) => string): string;
            };
            [Symbol.search]: (string: string) => number;
            [Symbol.split]: (string: string, limit?: number) => string[];
            [Symbol.matchAll]: (str: string) => IterableIterator<RegExpMatchArray>;
        };
        email: {
            exec: (string: string) => RegExpExecArray;
            test: (string: string) => boolean;
            readonly source: string;
            readonly global: boolean;
            readonly ignoreCase: boolean;
            readonly multiline: boolean;
            lastIndex: number;
            compile: (pattern: string, flags?: string) => RegExp;
            readonly flags: string;
            readonly sticky: boolean;
            readonly unicode: boolean;
            readonly dotAll: boolean;
            [Symbol.match]: (string: string) => RegExpMatchArray;
            [Symbol.replace]: {
                (string: string, replaceValue: string): string;
                (string: string, replacer: (substring: string, ...args: any[]) => string): string;
            };
            [Symbol.search]: (string: string) => number;
            [Symbol.split]: (string: string, limit?: number) => string[];
            [Symbol.matchAll]: (str: string) => IterableIterator<RegExpMatchArray>;
        };
    };
    caches: {
        cookies: {
            auto: string;
            token: {
                access: string;
                refresh: string;
            };
            theme: string;
        };
        storages: {
            user: string;
            email: string;
            routes: string;
            collapsed: string;
            locale: string;
            captcha: {
                login: string;
                register: string;
                email: string;
            };
        };
    };
    socialites: {
        domain: string;
        items: {
            name: string;
            icon: import("@ant-design/icons-vue/lib/icons/GithubOutlined").GithubOutlinedIconType;
        }[];
    };
    menus: {
        active: any[];
        opens: any[];
        items: any[];
        accordion: boolean;
        collapsed: boolean;
        drawer: boolean;
        dropdown: ({
            name: string;
            title: string;
            path: string;
            icon: import("@ant-design/icons-vue/lib/icons/GithubOutlined").GithubOutlinedIconType;
            tag: {
                content: string;
                icon?: unknown;
            };
        } | {
            name: string;
            title: string;
            path: string;
            icon: import("@ant-design/icons-vue/lib/icons/AppstoreAddOutlined").AppstoreAddOutlinedIconType;
            tag: {
                icon: import("@ant-design/icons-vue/lib/icons/FireFilled").FireFilledIconType;
                content?: unknown;
            };
        })[];
        relationshipChain: any[];
        width: number;
    };
    breadcrumbs: any[];
    copyright: {
        pc: string;
        mobile: string;
    };
};
declare const _default: {
    install(app: App): App<any>;
};
export default _default;
