declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            logo: string;
            prefixCls: string;
            width: string | number;
            height: number;
            radius: number;
            themeColor: string;
            bgColor: string;
            borderColor: string;
            textColor: string;
            boxShadow: boolean;
            boxShadowColor: string;
            boxShadowBlur: number;
            modalBgColor: string;
            modalBoxShadow: boolean;
            modalBoxShadowColor: string;
            modalBoxShadowBlur: number;
            image: string;
            mask: boolean;
            maskClosable: boolean;
            maxTries: number;
            initParams: {
                [key: string]: any;
            };
            initMethod: string;
            verifyParams: {
                [key: string]: any;
            };
            verifyMethod: string;
            checkParams: {
                [key: string]: any;
            };
            checkAction: string;
            checkMethod: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            width: import("vue-types").VueTypeDef<string | number> & {
                default: string | number;
            };
            height: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            radius: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            } & {
                default: number;
            };
            themeColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            bgColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            borderColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            textColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            boxShadow: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            } & {
                default: boolean;
            };
            boxShadowColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            boxShadowBlur: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            } & {
                default: number;
            };
            modalBgColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            modalBoxShadow: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            } & {
                default: boolean;
            };
            modalBoxShadowColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            modalBoxShadowBlur: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            image: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            logo: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            mask: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            } & {
                default: boolean;
            };
            maskClosable: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            } & {
                default: boolean;
            };
            maxTries: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            } & {
                default: number;
            };
            initParams: import("vue-types").VueTypeValidableDef<{
                [key: string]: any;
            }> & {
                default: () => {
                    [key: string]: any;
                };
            } & {
                default: () => {
                    [key: string]: any;
                };
            };
            initAction: import("vue-types").VueTypeDef<any>;
            initMethod: import("vue-types").VueTypeDef<string> & {
                default: string;
            };
            verifyParams: import("vue-types").VueTypeValidableDef<{
                [key: string]: any;
            }> & {
                default: () => {
                    [key: string]: any;
                };
            } & {
                default: () => {
                    [key: string]: any;
                };
            };
            verifyAction: import("vue-types").VueTypeDef<any>;
            verifyMethod: import("vue-types").VueTypeDef<string> & {
                default: string;
            };
            checkParams: import("vue-types").VueTypeValidableDef<{
                [key: string]: any;
            }> & {
                default: () => {
                    [key: string]: any;
                };
            } & {
                default: () => {
                    [key: string]: any;
                };
            };
            checkAction: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            checkMethod: import("vue-types").VueTypeDef<string> & {
                default: string;
            };
        }>> & {
            onInit?: (...args: any[]) => any;
            onChecked?: (...args: any[]) => any;
            onSuccess?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "logo" | "prefixCls" | "width" | "height" | "radius" | "themeColor" | "bgColor" | "borderColor" | "textColor" | "boxShadow" | "boxShadowColor" | "boxShadowBlur" | "modalBgColor" | "modalBoxShadow" | "modalBoxShadowColor" | "modalBoxShadowBlur" | "image" | "mask" | "maskClosable" | "maxTries" | "initParams" | "initMethod" | "verifyParams" | "verifyMethod" | "checkParams" | "checkAction" | "checkMethod">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "init" | "checked" | "success", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            width: import("vue-types").VueTypeDef<string | number> & {
                default: string | number;
            };
            height: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            radius: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            } & {
                default: number;
            };
            themeColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            bgColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            borderColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            textColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            boxShadow: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            } & {
                default: boolean;
            };
            boxShadowColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            boxShadowBlur: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            } & {
                default: number;
            };
            modalBgColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            modalBoxShadow: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            } & {
                default: boolean;
            };
            modalBoxShadowColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            modalBoxShadowBlur: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            image: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            logo: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            mask: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            } & {
                default: boolean;
            };
            maskClosable: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            } & {
                default: boolean;
            };
            maxTries: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            } & {
                default: number;
            };
            initParams: import("vue-types").VueTypeValidableDef<{
                [key: string]: any;
            }> & {
                default: () => {
                    [key: string]: any;
                };
            } & {
                default: () => {
                    [key: string]: any;
                };
            };
            initAction: import("vue-types").VueTypeDef<any>;
            initMethod: import("vue-types").VueTypeDef<string> & {
                default: string;
            };
            verifyParams: import("vue-types").VueTypeValidableDef<{
                [key: string]: any;
            }> & {
                default: () => {
                    [key: string]: any;
                };
            } & {
                default: () => {
                    [key: string]: any;
                };
            };
            verifyAction: import("vue-types").VueTypeDef<any>;
            verifyMethod: import("vue-types").VueTypeDef<string> & {
                default: string;
            };
            checkParams: import("vue-types").VueTypeValidableDef<{
                [key: string]: any;
            }> & {
                default: () => {
                    [key: string]: any;
                };
            } & {
                default: () => {
                    [key: string]: any;
                };
            };
            checkAction: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            checkMethod: import("vue-types").VueTypeDef<string> & {
                default: string;
            };
        }>> & {
            onInit?: (...args: any[]) => any;
            onChecked?: (...args: any[]) => any;
            onSuccess?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("init" | "checked" | "success")[], string, {
            logo: string;
            prefixCls: string;
            width: string | number;
            height: number;
            radius: number;
            themeColor: string;
            bgColor: string;
            borderColor: string;
            textColor: string;
            boxShadow: boolean;
            boxShadowColor: string;
            boxShadowBlur: number;
            modalBgColor: string;
            modalBoxShadow: boolean;
            modalBoxShadowColor: string;
            modalBoxShadowBlur: number;
            image: string;
            mask: boolean;
            maskClosable: boolean;
            maxTries: number;
            initParams: {
                [key: string]: any;
            };
            initMethod: string;
            verifyParams: {
                [key: string]: any;
            };
            verifyMethod: string;
            checkParams: {
                [key: string]: any;
            };
            checkAction: string;
            checkMethod: string;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        width: import("vue-types").VueTypeDef<string | number> & {
            default: string | number;
        };
        height: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        radius: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        } & {
            default: number;
        };
        themeColor: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        bgColor: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        borderColor: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        textColor: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        boxShadow: import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        } & {
            default: boolean;
        };
        boxShadowColor: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        boxShadowBlur: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        } & {
            default: number;
        };
        modalBgColor: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        modalBoxShadow: import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        } & {
            default: boolean;
        };
        modalBoxShadowColor: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        modalBoxShadowBlur: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        image: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        logo: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        mask: import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        } & {
            default: boolean;
        };
        maskClosable: import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        } & {
            default: boolean;
        };
        maxTries: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        } & {
            default: number;
        };
        initParams: import("vue-types").VueTypeValidableDef<{
            [key: string]: any;
        }> & {
            default: () => {
                [key: string]: any;
            };
        } & {
            default: () => {
                [key: string]: any;
            };
        };
        initAction: import("vue-types").VueTypeDef<any>;
        initMethod: import("vue-types").VueTypeDef<string> & {
            default: string;
        };
        verifyParams: import("vue-types").VueTypeValidableDef<{
            [key: string]: any;
        }> & {
            default: () => {
                [key: string]: any;
            };
        } & {
            default: () => {
                [key: string]: any;
            };
        };
        verifyAction: import("vue-types").VueTypeDef<any>;
        verifyMethod: import("vue-types").VueTypeDef<string> & {
            default: string;
        };
        checkParams: import("vue-types").VueTypeValidableDef<{
            [key: string]: any;
        }> & {
            default: () => {
                [key: string]: any;
            };
        } & {
            default: () => {
                [key: string]: any;
            };
        };
        checkAction: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        checkMethod: import("vue-types").VueTypeDef<string> & {
            default: string;
        };
    }>> & {
        onInit?: (...args: any[]) => any;
        onChecked?: (...args: any[]) => any;
        onSuccess?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    width: import("vue-types").VueTypeDef<string | number> & {
        default: string | number;
    };
    height: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    radius: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    themeColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    bgColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    borderColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    textColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    boxShadow: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    boxShadowColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    boxShadowBlur: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    modalBgColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    modalBoxShadow: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    modalBoxShadowColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    modalBoxShadowBlur: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    image: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    logo: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    mask: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    maskClosable: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    maxTries: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    initParams: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    initAction: import("vue-types").VueTypeDef<any>;
    initMethod: import("vue-types").VueTypeDef<string> & {
        default: string;
    };
    verifyParams: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    verifyAction: import("vue-types").VueTypeDef<any>;
    verifyMethod: import("vue-types").VueTypeDef<string> & {
        default: string;
    };
    checkParams: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    checkAction: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    checkMethod: import("vue-types").VueTypeDef<string> & {
        default: string;
    };
}>> & {
    onInit?: (...args: any[]) => any;
    onChecked?: (...args: any[]) => any;
    onSuccess?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("init" | "checked" | "success")[], "init" | "checked" | "success", {
    logo: string;
    prefixCls: string;
    width: string | number;
    height: number;
    radius: number;
    themeColor: string;
    bgColor: string;
    borderColor: string;
    textColor: string;
    boxShadow: boolean;
    boxShadowColor: string;
    boxShadowBlur: number;
    modalBgColor: string;
    modalBoxShadow: boolean;
    modalBoxShadowColor: string;
    modalBoxShadowBlur: number;
    image: string;
    mask: boolean;
    maskClosable: boolean;
    maxTries: number;
    initParams: {
        [key: string]: any;
    };
    initMethod: string;
    verifyParams: {
        [key: string]: any;
    };
    verifyMethod: string;
    checkParams: {
        [key: string]: any;
    };
    checkAction: string;
    checkMethod: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
