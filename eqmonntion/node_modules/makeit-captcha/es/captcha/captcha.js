var _this = this;

import { createTextVNode as _createTextVNode, Fragment as _Fragment, createVNode as _createVNode } from "vue";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _newArrowCheck(innerThis, boundThis) { if (innerThis !== boundThis) { throw new TypeError("Cannot instantiate an arrow function"); } }

import { defineComponent, computed, reactive, Teleport, ref, onMounted, onBeforeUnmount } from 'vue';
import { VerifiedOutlined } from '@ant-design/icons-vue';
import PropTypes from '../utils/props-types';
import { getPrefixCls, tuple } from '../utils/props-tools';
import { $tools } from '../utils/tools';
import { $g } from '../utils/global';
import { $request } from '../utils/request';
import MiCaptchaModal from './modal';
var POWERED = 'Powered By makeit.vip';
var AVATAR = 'https://file.makeit.vip/MIIT/M00/00/00/ajRkHV_pUyOALE2LAAAtlj6Tt_s370.png';
var TARGET = 'https://admin.makeit.vip/components/captcha';
export var captchaProps = function captchaProps() {
  _newArrowCheck(this, _this);

  return {
    prefixCls: PropTypes.string,
    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).def(320),
    height: PropTypes.number,
    radius: PropTypes.number.def(48),
    themeColor: PropTypes.string,
    bgColor: PropTypes.string,
    borderColor: PropTypes.string,
    textColor: PropTypes.string,
    boxShadow: PropTypes.bool.def(true),
    boxShadowColor: PropTypes.string,
    boxShadowBlur: PropTypes.number.def(4),
    modalBgColor: PropTypes.string,
    modalBoxShadow: PropTypes.bool.def(true),
    modalBoxShadowColor: PropTypes.string,
    modalBoxShadowBlur: PropTypes.number,
    image: PropTypes.string,
    logo: PropTypes.string,
    mask: PropTypes.bool.def(true),
    maskClosable: PropTypes.bool.def(true),
    maxTries: PropTypes.number.def(5),
    initParams: PropTypes.object.def({}),
    initAction: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
    initMethod: PropTypes.oneOf(tuple.apply(void 0, _toConsumableArray($g.methods))).def('get'),
    verifyParams: PropTypes.object.def({}),
    verifyAction: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
    verifyMethod: PropTypes.oneOf(tuple.apply(void 0, _toConsumableArray($g.methods))).def('post'),
    checkParams: PropTypes.object.def({}),
    checkAction: PropTypes.string,
    checkMethod: PropTypes.oneOf(tuple.apply(void 0, _toConsumableArray($g.methods))).def('post')
  };
}.bind(this);
export default defineComponent({
  name: 'MiCaptcha',
  inheritAttrs: false,
  props: captchaProps(),
  emits: ['init', 'checked', 'success'],
  setup: function setup(props, _ref) {
    var _this2 = this;

    var emit = _ref.emit,
        attrs = _ref.attrs;
    var prefixCls = getPrefixCls('captcha', props.prefixCls);
    var captchaRef = ref(null);
    var captchaModalRef = ref(null);
    var isMobile = $tools.isMobile();
    var themeColorStyle = computed(function () {
      _newArrowCheck(this, _this2);

      return props.themeColor ? {
        backgroundColor: props.themeColor,
        boxShadow: "inset 0 0 0 1px ".concat(props.themeColor)
      } : null;
    }.bind(this));
    var params = reactive({
      avatar: AVATAR,
      powered: POWERED,
      target: TARGET,
      init: false,
      failed: false,
      pass: false,
      tip: props.initAction ? '正在初始化验证码 ···' : '点击按钮进行验证',
      timer: null,
      status: {
        ready: true,
        scanning: false,
        being: false,
        success: false
      },
      offset: {
        top: 22.5,
        left: 48
      },
      modal: {
        show: false,
        pos: {}
      },
      verifyParams: _objectSpread({}, props.verifyParams)
    });
    onBeforeUnmount(function () {
      _newArrowCheck(this, _this2);

      closeCaptchaModal({
        status: 'close'
      });
      $tools.off(window, 'resize', resize);
    }.bind(this));
    onMounted(function () {
      _newArrowCheck(this, _this2);

      initCaptcha();
      $tools.on(window, 'resize', resize);
    }.bind(this));

    var initCaptcha = function initCaptcha() {
      var _this3 = this;

      _newArrowCheck(this, _this2);

      var afterInit = function afterInit() {
        var tip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '点击按钮进行验证';
        params.failed = false;
        params.init = true;
        params.tip = tip;
      };

      if (props.initAction) {
        if (typeof props.initAction === 'function') {
          afterInit();
          props.initAction();
        } else {
          $request[props.initMethod.toLowerCase()](props.initAction, props.initParams).then(function (res) {
            var _res$data;

            _newArrowCheck(this, _this3);

            afterInit();
            if (res !== null && res !== void 0 && (_res$data = res.data) !== null && _res$data !== void 0 && _res$data.key && !params.verifyParams.key) params.verifyParams.key = res.data.key;
            emit('init', res);
          }.bind(this)).catch(function () {
            _newArrowCheck(this, _this3);

            afterInit('初始化接口有误，请稍候再试');
          }.bind(this));
        }
      } else afterInit();
    }.bind(this);

    var showCaptchaModal = function showCaptchaModal() {
      var _this4 = this;

      _newArrowCheck(this, _this2);

      if (!params.init || params.status.success) return;
      params.tip = '智能检测中 ···';
      params.status.ready = false;
      params.status.scanning = true;

      if (props.checkAction) {
        $request[props.checkMethod.toLowerCase()](props.checkAction, props.checkParams).then(function (res) {
          _newArrowCheck(this, _this4);

          if (res.data.pass) params.pass = true;else initCaptchaModal();
          emit('checked', res);
        }.bind(this)).catch(function () {
          _newArrowCheck(this, _this4);

          params.pass = false;
          initCaptchaModal();
        }.bind(this));
      } else initCaptchaModal();
    }.bind(this);

    var initCaptchaModal = function initCaptchaModal() {
      _newArrowCheck(this, _this2);

      params.status.scanning = false;
      params.status.being = true;
      params.modal.pos = getCaptchaModalPosition();
      params.modal.show = true;
      params.tip = '请移动滑块，完成验证';
    }.bind(this);

    var closeCaptchaModal = function closeCaptchaModal(data) {
      _newArrowCheck(this, _this2);

      if (data) {
        if (data.status === 'close') reset();
        if (data.status === 'success') success(data.data);

        if (data.status === 'frequently') {
          reset();
          showMessage("\u5DF2\u8FDE\u7EED\u9519\u8BEF\u8FBE ".concat(props.maxTries, " \u6B21\uFF0C\u8BF7\u7A0D\u5019\u518D\u8BD5"));
        }
      }
    }.bind(this);

    var getCaptchaModalPosition = function getCaptchaModalPosition() {
      _newArrowCheck(this, _this2);

      var elem = captchaRef.value;
      var pos = {
        left: 0,
        top: 0
      };

      if (elem) {
        var rect = elem.getBoundingClientRect();
        var top = Math.round(rect.top * 1000) / 1000 + params.offset.top;
        var left = Math.round(rect.left * 1000) / 1000 + params.offset.left;
        pos = {
          left: left,
          top: top
        };
      }

      return pos;
    }.bind(this);

    var renderSuccessShow = function renderSuccessShow() {
      var _props$themeColor;

      _newArrowCheck(this, _this2);

      var hex = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
      var rgb = /^(rgb|RGB)/;
      var successCls = "".concat(prefixCls, "-success");
      var cls = "".concat(successCls).concat(params.status.success ? " ".concat(successCls, "-show") : '');
      var backgroundColor = props.themeColor ? hex.test(props.themeColor) ? $tools.colorHex2Rgba(props.themeColor, 0.2) : rgb.test(props.themeColor) ? $tools.colorHex2Rgba($tools.colorRgb2Hex(props.themeColor), 0.2) : props.themeColor : null;
      var style = {
        borderRadius: props.radius ? $tools.convert2Rem(props.radius) : null,
        background: backgroundColor,
        borderColor: (_props$themeColor = props.themeColor) !== null && _props$themeColor !== void 0 ? _props$themeColor : null
      };
      return _createVNode("div", {
        "class": cls,
        "style": style
      }, null);
    }.bind(this);

    var showMessage = function showMessage() {
      var _this5 = this;

      var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '错误提示';
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
      var name = "".concat(prefixCls, "-message");
      var exist = document.getElementById(name);
      if (exist) exist.remove();
      var elem = document.createElement('div');
      elem.id = name;
      elem.className = name;
      elem.innerHTML = "\n                <div class=\"".concat(name, "-content\">\n                    <span>").concat(msg, "</span>\n                </div>\n            ");
      document.body.appendChild(elem);
      if (params.timer) clearTimeout(params.timer);
      params.timer = setTimeout(function () {
        _newArrowCheck(this, _this5);

        elem.remove();
      }.bind(this), duration * 1000);
    };

    var success = function success(data) {
      var _this6 = this;

      _newArrowCheck(this, _this2);

      params.tip = '通过验证';
      emit('success', data);
      setTimeout(function () {
        _newArrowCheck(this, _this6);

        params.modal.show = false;
        params.status.being = false;
        params.status.success = true;
      }.bind(this));
    }.bind(this);

    var reset = function reset() {
      _newArrowCheck(this, _this2);

      params.modal.show = false;
      params.status.being = false;
      params.status.success = false;
      params.status.scanning = false;
      params.status.ready = true;
      params.tip = '点击按钮进行验证';
    }.bind(this);

    var resize = function resize() {
      _newArrowCheck(this, _this2);

      params.modal.pos = getCaptchaModalPosition();
    }.bind(this);

    var renderContent = function renderContent() {
      var _this7 = this;

      _newArrowCheck(this, _this2);

      var width = $tools.convert2Rem(props.width);
      var height = $tools.convert2Rem(props.height);
      var modal = params.modal.show ? _createVNode(Teleport, {
        "to": "body",
        "ref": captchaModalRef
      }, {
        default: function _default() {
          _newArrowCheck(this, _this7);

          return [_createVNode(MiCaptchaModal, {
            "position": params.modal.pos,
            "maxTries": props.maxTries,
            "show": params.modal.show,
            "mask": props.mask,
            "maskClosable": props.maskClosable,
            "boxShadow": props.modalBoxShadow,
            "boxShadowBlur": props.modalBoxShadowBlur,
            "boxShadowColor": props.modalBoxShadowColor,
            "themeColor": props.themeColor,
            "bgColor": props.modalBgColor,
            "verifyMethod": props.verifyMethod,
            "verifyParams": params.verifyParams,
            "verifyAction": props.verifyAction,
            "onModalClose": closeCaptchaModal,
            "image": props.image
          }, null)];
        }.bind(this)
      }) : null;
      return _createVNode(_Fragment, null, [_createVNode("div", {
        "class": "".concat(prefixCls, "-content"),
        "style": {
          width: width,
          height: height
        }
      }, [renderRadar(), renderSuccessShow()]), modal]);
    }.bind(this);

    var renderRadar = function renderRadar() {
      var _ref2, _props$borderColor, _props$bgColor;

      _newArrowCheck(this, _this2);

      var cls = "".concat(prefixCls, "-radar").concat(params.status.success ? " ".concat(prefixCls, "-radar-pass") : '');
      var style = {
        borderRadius: props.radius ? $tools.convert2Rem(props.radius) : null,
        borderColor: (_ref2 = (_props$borderColor = props.borderColor) !== null && _props$borderColor !== void 0 ? _props$borderColor : props.themeColor) !== null && _ref2 !== void 0 ? _ref2 : null,
        background: (_props$bgColor = props.bgColor) !== null && _props$bgColor !== void 0 ? _props$bgColor : null,
        boxShadow: props.boxShadow ? props.boxShadowColor || props.themeColor ? "0 0 ".concat($tools.convert2Rem(props.boxShadowBlur), " ").concat(props.boxShadowColor || props.themeColor) : 'none' : 'none'
      };
      return _createVNode("div", {
        "class": cls,
        "style": style
      }, [renderRadarReady(), renderRadarScan(), renderRadarBeing(), renderRadarSuccess(), renderRadarTip(), renderRadarLogo()]);
    }.bind(this);

    var renderRadarReady = function renderRadarReady() {
      _newArrowCheck(this, _this2);

      return params.status.ready ? _createVNode("div", {
        "class": "".concat(prefixCls, "-radar-ready")
      }, [_createVNode("div", {
        "class": "".concat(prefixCls, "-radar-ring"),
        "style": themeColorStyle.value
      }, null), _createVNode("div", {
        "class": "".concat(prefixCls, "-radar-dot"),
        "style": themeColorStyle.value,
        "ref": "".concat(prefixCls, "-radar-dot")
      }, null)]) : null;
    }.bind(this);

    var renderRadarScan = function renderRadarScan() {
      _newArrowCheck(this, _this2);

      var borderColor = props.themeColor ? "".concat(props.themeColor, " transparent ").concat(props.themeColor, " transparent") : null;
      var borderColor2 = props.themeColor ? "transparent ".concat(props.themeColor, " transparent ").concat(props.themeColor) : null;
      return params.status.scanning ? _createVNode("div", {
        "class": "".concat(prefixCls, "-radar-scan")
      }, [_createVNode("div", {
        "class": "double-ring"
      }, [_createVNode("div", {
        "style": {
          borderColor: borderColor
        }
      }, null), _createVNode("div", {
        "style": {
          borderColor: borderColor2
        }
      }, null)])]) : null;
    }.bind(this);

    var renderRadarBeing = function renderRadarBeing() {
      var _props$textColor;

      _newArrowCheck(this, _this2);

      return params.status.being ? _createVNode("div", {
        "class": "".concat(prefixCls, "-radar-being"),
        "style": {
          color: (_props$textColor = props.textColor) !== null && _props$textColor !== void 0 ? _props$textColor : null
        }
      }, [_createTextVNode("\xB7\xB7\xB7")]) : null;
    }.bind(this);

    var renderRadarSuccess = function renderRadarSuccess() {
      var _props$themeColor2;

      _newArrowCheck(this, _this2);

      var iconStyle = {
        fontSize: $tools.convert2Rem(20),
        color: (_props$themeColor2 = props.themeColor) !== null && _props$themeColor2 !== void 0 ? _props$themeColor2 : null
      };
      var radarSuccessCls = "".concat(prefixCls, "-radar-success");
      return params.status.success ? _createVNode("div", {
        "class": "".concat(radarSuccessCls, " ").concat(radarSuccessCls, "-icon")
      }, [_createVNode(VerifiedOutlined, {
        "style": iconStyle
      }, null)]) : null;
    }.bind(this);

    var renderRadarTip = function renderRadarTip() {
      var _props$textColor2;

      _newArrowCheck(this, _this2);

      var radarTipCls = "".concat(prefixCls, "-radar-tip");
      var errCls = params.failed ? " ".concat(radarTipCls, "-error") : '';
      var cls = "".concat(radarTipCls).concat(errCls);
      var style = {
        height: $tools.convert2Rem(props.height),
        color: params.status.success && props.themeColor ? props.themeColor : (_props$textColor2 = props.textColor) !== null && _props$textColor2 !== void 0 ? _props$textColor2 : null
      };
      return _createVNode("div", {
        "class": cls,
        "style": style,
        "innerHTML": params.tip
      }, null);
    }.bind(this);

    var renderRadarLogo = function renderRadarLogo() {
      var _props$logo;

      _newArrowCheck(this, _this2);

      var height = props.height && props.height > 40 ? props.height : null;
      var top = Math.round((height - 20) / 2 * 100) / 100 - 1;
      var style = {
        top: height ? $tools.convert2Rem(top) : null
      };
      return _createVNode("div", {
        "class": "".concat(prefixCls, "-radar-logo"),
        "style": style
      }, [_createVNode("a", {
        "href": params.target,
        "target": "_blank"
      }, [_createVNode("img", {
        "src": (_props$logo = props.logo) !== null && _props$logo !== void 0 ? _props$logo : params.avatar,
        "alt": params.powered
      }, null)])]);
    }.bind(this);

    return function () {
      _newArrowCheck(this, _this2);

      return _createVNode("div", _objectSpread(_objectSpread({
        "class": "".concat(prefixCls).concat(isMobile ? " ".concat(prefixCls, "-mobile") : '')
      }, attrs), {}, {
        "onClick": showCaptchaModal,
        "key": "".concat(prefixCls, "-").concat($tools.uid()),
        "ref": captchaRef
      }), [renderContent()]);
    }.bind(this);
  }
});